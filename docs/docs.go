// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs
// "host": "ec2-user@ec2-44-202-36-198.compute-1.amazonaws.com:5000",
    // "host": "localhost:5000",
//    "host": "http://54.184.142.75:5000",
// 44.203.164.223
import "github.com/swaggo/swag"

const docTemplate = 
`
{
    "swagger": "2.0",
    "info": {
      "title": "Dancer API",
      "description": "Authentication token should start with Bearer [space] token || example > Bearer eyJhbGciOiJIUzI1NiIsInR5..... |||  You Can Go To /Services to know how to work with socket services on the app",      "version": "2.0.0"
    },
    "basePath": "/",
    "schemes": [
      "http",
    ],
    "securityDefinitions": {
        "Bearer": {
          "type": "apiKey",
          "name": "Authorization",
          "in": "header"
        }
      },
   
    
    
    

      
      "paths": {
        "/api/user/manual-signup": {
          "post": {
            "tags": [
              "Auth / Manula signup"
            ],
            "summary": "manual signup",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "dateOfBirth": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "firstName": "Ahmed",
                    "lastName": "Khalaf",
                    "dateOfBirth": "15-8-1996",
                    "email": "ahmed@ahmed.com",
                    "password": "ahmed5747723"
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't crate Now User"
              }
            }
          }
        },
        "/api/user/manual-signin": {
          "post": {
            "tags": [
              "Auth / Manula login"
            ],
            "summary": "manual login",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "email": "ahmed@ahmed.com",
                    "password": "ahmed5747723"
                  }
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid input"
              },
              "405": {
                "description": "Invalid input"
              },
              "404": {
                  "description": "Invalid User With Given Email"
                },
              "302": {
                "description": "given Password is not correct !"
              },
              "500": {
                "description": "Server Error could not login"
              }
            }
          }
        },
        "/api/user/Auth-social-Google": {
          "post": {
            "tags": [
              "Auth /Social login & Register Google"
            ],
            "summary": "Social login & Register Google",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "email": "jack@jack.com",
                    "firstName": "jack",
                    "lastName": "Dom",
                    "token": "tokendataExample || NOT Requerd"
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't login "
              }
            }
          }
        },
        "/api/user/Auth-social-Facebook": {
          "post": {
            "tags": [
              "Auth /Social login & Register FaceBook"
            ],
            "summary": "Social login & Register FaceBook",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "email": "jack@jack.com",
                    "firstName": "jack",
                    "lastName": "Dom",
                    "token": "tokendataExample || NOT Requerd"
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't login "
              }
            }
          }
        },
  
        "/api/user/Auth-social-Apple": {
          "post": {
            "tags": [
              "Auth /Social login & Register Apple"
            ],
            "summary": "Social login & Register Apple",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "email": "jack@jack.com",
                    "firstName": "jack",
                    "lastName": "Dom",
                    "token": "tokendataExample || NOT Requerd"
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't login "
              }
            }
          }
        },
  
        "/api/user/GetPhoneCountriesCodesList": {
          "get": {
            "tags": [
              "Get list of countries data For Authentication With Phone Numebr Return All nesserssry data like DialingCode etc."
            ],
            "summary": " Alpha phone Numbers code  For Each Country",
            "description": " Alpha phone Numbers code  For Each Country",
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Not Found"
              }
            }
          }
        },
  
  
        "/api/user/Auth-Phone-Number": {
          "post": {
            "tags": [
              "Auth / Phone Number login & Register"
            ],
            "summary": "PhoneNumber login & Register",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "phoneNumber": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "phoneNumber": "+201278592995",
                    "firstName": "sara",
                    "lastName": "belosy",
                    "password": "sara55555"
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't login "
              }
            }
          }
        },
   
        
        "/api/ReSendVeryficationCodeToMail": {
          "post": {
            "tags": [
              "Auth / ReSendVeryficationCodeToMail"
            ],
            "summary": "will return ok Status if created succesfully Or 500 status there is an error",
            "description": "we use it if the veryfication code dose not arrived to the user and user asks to resend the code",
            "produces": [
              "application/json"
            ],
            "parameters": [ 
              {
                "in": "body",
                "name": "body",
                "description": "pass mail",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      type": "string"
                    }
                  },
                  "example": {
                    "email": "ahmed@ahmed.com",
                    "password": "ahmed5747723",
                  }
                }
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "500":{
                "description":"internal server error"
              }
            }
          }
        },
  
        
        
  
        "/api/ReSendVeryficationCodeToPhoneNumber": {
          "post": {
            "tags": [
              "Auth / ReSend Veryfication Code To Phone Number"
            ],
            "summary": "will return ok Status if created succesfully Or 500 status there is an error",
            "description": "we use it if the veryfication code dose not arrived to the user and user asks to resend the code",
            "produces": [
              "application/json"
            ],
            "parameters": [ 
              {
                "in": "body",
                "name": "body",
                "description": "pass phone and password ",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "phoneNumber": {
                      "type": "string"
                    },
                    "password": {
                      type": "string"
                    }
                  },
                  "example": {
                    "phoneNumber": "+201278592995",
                    "password": "sara55555",
                  }
                }
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "500":{
                "description":"internal server error"
              }
            }
          }
        },
  
  
             
        "/api/VeryfiedProfileAccount/{userId}": {
          "post": {
            "tags": [
              "Auth / Veryfied Profile Account"
            ],
            "summary": "will return ok Status if Veryfied succesfully Or 500 status there is an error",
            "description":"will return ok Status if Veryfied succesfully Or 500 status there is an error",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in": "path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "pass Verified Code ",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "veryfiyCode": {
                      "type": "string"
                    },
                  },
                  "example": {
                    "veryfiyCode": "1234",
                  }
                }
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "500":{
                "description":"internal server error"
              }
            }
          }
        },  
  
  
        "/api/GetDaces": {
          "get": {
            "tags": [
              "GetDances"
            ],
            "summary": "will return The diffrent dances",
            "description": "will return The diffrent dances",
            "produces": [
              "application/json"
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Not Found"
              }
            }
          }
        },
        "/api/user/UpdateInfo/{id}": {
          "patch": {
            "security": [
              {
                "Bearer": []
              }
            ],
            "tags": [
              "Updated User Data"
            ],
            "summary": "Update user data",
            "description": "",
            "operationId": "addPet",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path"
              },
              {
                "in": "body",
                "name": "body",
                "description": "Pet object that needs to be added to the store",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstname": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "dateOfBirth": {
                      "type": "string"
                    },
                    "statusOfUser": {
                      "type": "string"
                    },
                    "userProfilePhoto": {
                      "type": "string"
                    },
                    "userHeight": "33",
                    "Gender": {
                      "type": "string"
                    },
                    "orientation": {
                      "type": "string"
                    },
                    "userRelationship": {
                      "type": "string"
                    },
                    "userLookFor": {
                      "type": "string"
                    },
                    "userRole": {
                      "type": "string"
                    },
                    "school": {
                      "type": "string"
                    },
                    "placeOfJob": {
                      "type": "string"
                    },
                    "jobTitle": {
                      "type": "string"
                    },
                    "userCurrentMood": {
                      "type": "string"
                    },
                    "userMediaPhoto": {
                      "type": "array"
                    },
                    "userMediaVideo": {
                      "type": "array"
                    },
                    "userLocation": {
                      "type": "array"
                    },
                    "locationDetails": {
                      "type": "array"
                    },
                    "userLanguages": {
                      "type": "array"
                    },
                    "userHobbyes": {
                      "type": "array"
                    },
                    "userZodlac": {
                      "type": "array"
                    },
                    "userPets": {
                      "type": "array"
                    },
                    "isUserSmoking": {
                      "type": "boolean"
                    },
                    "physlcalAttraction": {
                      "type": "array"
                    },
                    "userTurnON": {
                      "type": "array"
                    },
                    "userStyle": {
                      "type": "array"
                    },
                    "userBody": {
                      "type": "array"
                    },
                    "userSesson": {
                      "type": "array"
                    },
                    "userMovies": {
                      "type": "array"
                    },
                    "userDrink": {
                      "type": "array"
                    }
                  },
                  "example": {
                    "firstname": "Ahmed ",
                    "firstName": "Updated Ahmed",
                    "dateOfBirth": "7-4-9988",
                    "statusOfUser": "testing..any data",
                    "userProfilePhoto": "testing..any data",
                    "userHeight": "33",
                    "Gender": "testing..any data",
                    "orientation": "testing..any data",
                    "userRelationship": "testing..any data",
                    "userLookFor": "testing..any data",
                    "userRole": "testing..any data",
                    "school": "testing..any data",
                    "placeOfJob": "testing..any data",
                    "jobTitle": "testing..any data",
                    "userCurrentMood": "testing..any data",
                    "userMediaVideo": [
                      "first media"
                    ],
                    "userLocation": [
                      "USA-NYC"
                    ],
                    "locationDetails":["-73.9667, 40.78"],
                    "userLanguages": [
                      "test"
                    ],
                    "userHobbyes": [
                      "test"
                    ],
                    "userZodlac": [
                      "test"
                    ],
                    "userPets": [
                      "test"
                    ],
                    "isUserSmoking":false,
                    "physlcalAttraction": [
                      "test"
                    ],
                    "userTurnON": [
                      "test"
                    ],
                    "userStyle": [
                      "test"
                    ],
                    "userBody": [
                      "test"
                    ],
                    "userSesson": [
                      "test"
                    ],
                    "userMovies": [
                      "test"
                    ],
                    "userDrink": [
                      "test"
                    ]
                  }
                }
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't Update Userdata "
              }
            }
          }
        },
  
     
        "/api/AddNewEmailToUserProfile/{userId}": {
          "post": {
            "tags": [
              "User / Add New Email To User Profile"
            ],
            "summary": "will return ok Status if added successfully",
            "description":"will return ok Status if added successfully",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in": "path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "pass Verified Code ",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "providedEmail": {
                      "type": "string"
                    },
                  },
                  "example": {
                    "providedEmail": "ahmed@ahmed.com",
                  }
                }
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "500":{
                "description":"internal server error"
              }
            }
          }
        },  
  
  
        "/api/VeryfiedAddedEmailToProfile/{userId}": {
          "post": {
            "tags": [
              "User / Veryfied Added Email To Profile "
            ],
            "summary": "will return ok Status if added successfully To The UserProfile Data",
            "description":"will return ok Status if added successfully To The UserProfile Data",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in": "path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "pass Verified Code ",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "veryfiyCode": {
                      "type": "string"
                    },
                  },
                  "example": {
                    "veryfiyCode": "1234",
                  }
                }
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "500":{
                "description":"internal server error"
              }
            }
          }
        },  
  
  
        "/api/AddNewPhoneNumberToUserProfile/{userId}": {
          "post": {
            "tags": [
              "User / Add New Phone Number To User Profile"
            ],
            "summary": "will return ok Status if added successfully",
            "description":"will return ok Status if added successfully",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in": "path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "pass Verified Code ",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "providedPhoneNumber": {
                      "type": "string"
                    },
                  },
                  "example": {
                    "providedPhoneNumber": "+201278592995",
                  }
                }
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "500":{
                "description":"internal server error"
              }
            }
          }
        },  
  
  
  
        "/api/VeryfiedAddedPhoneToProfile/{userId}": {
          "post": {
            "tags": [
              "User / Veryfied Added Phone To Profile"
            ],
            "summary": "will return ok Status if added successfully To The UserProfile Data",
            "description":"will return ok Status if added successfully To The UserProfile Data",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in": "path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "pass Verified Code ",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "veryfiyCode": {
                      "type": "string"
                    },
                  },
                  "example": {
                    "veryfiyCode": "1234",
                  }
                }
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "500":{
                "description":"internal server error"
              }
            }
          }
        },  
  
  
  
  
  
        "/api/user/Suggested/{id}": {
          "get": {
            "tags": [
              "Get Suggested or Matched User "
            ],
            "summary": "Get Suggested or Matched User",
            "description": "",
            "operationId": "getusersug",
            "consumes": [
              "application/json",
              "application/xml"
            ],
            "produces": [
              "application/xml",
              "application/json"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "Pet object that needs to be added to the store"
              }
            ],
            "responses": {
              "208": {
                "description": "Email Already Exist"
              },
              "400": {
                "description": "Invalid input"
              },
              "403": {
                "description": "can't Register new user"
              },
              "405": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Server Error Can't Update Userdata "
              }
            }
          }
        },
        "/api/user/UpdateSug/{mid}/LikeOrHate/{nid}": {
          "patch": {
            "tags": [
              "Update suggested List user Add like or dis like The Suggested User"
            ],
            "summary": "Will Return  Another Partner From the List",
            "description": "Suggested User By default is aleady taken true as LoveOrHate faild at the db You Need just to send the user id and the suggested user id and by default will return the opposite of value",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "mid",
                "in":"path"
              },
              {
                "name": "nid",
                "in": "path"
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/message/{FuserID}/{SuserID}": {
          "get": {
            "tags": [
              "Get Private Room Unique id"
            ],
            "summary": "Will Return  Another Partner From the List",
            "description": "Suggested User By default is aleady taken true as LoveOrHate faild at the db You Need just to send the user id and the suggested user id and by default will return the opposite of value",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "FuserID",
                "in":"path"
              },
              {
                "name": "SuserID",
                "in": "path"
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/message": {
          "post": {
            "tags": [
              "Send Message"
            ],
            "summary": "Will Return  Another Partner From the List",
            "description": "Suggested User By default is aleady taken true as LoveOrHate faild at the db You Need just to send the user id and the suggested user id and by default will return the opposite of value",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "in": "body",
                "name": "body",
                "description": "any",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "messageType":{
                      "type":"array"
                    },
                    "sender":{
                     "type":"string"
                    },
                    "received":{
                    "type":"string"
                    },
                  },
                  "example": {
                    "message": "Hi How Are You",
                    "messageType":["stringMessage"],
                    "sender":"637331d35d9d5bd2af78e876",
                    "received":"637332245d9d5bd2af78e877",
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/message/GetMessages/{roomId}/{userId}": {
          "post": {
            "tags": [
              "Get Private Room list from From Specific Chat index Or Number"
            ],
            "summary": "Will Return  nmber of messages ",
            "description": " Will return number of messages depening on default number of returnned messages and passed index number at the body",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "roomId",
                "in":"path"
              },
              {
                "name": "userId",
                "in": "path"
              }, {
                "in": "body",
                "name": "body",
                "description": "any",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "From": {
                      "type": "number"
                    },
                  },
                  "example": {
                    "From": 1
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
  
        "/api/GroupMessage/{GroupName}/{CreatorID}": {
          "post": {
            "tags": [
              "Group"
            ],
            "summary": "Will Return the Group room id and if not found It will create new one",
            "description": " Will return roomid",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "GroupName",
                "in":"path"
              },
              {
                "name": "CreatorID",
                "in": "path"
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/SendMessageToGroup/{GroupID}/{SenerId}": {
          "post": {
            "tags": [
              "Group"
            ],
            "summary": "summary send massage to the group ",
            "description": "disc send message to the group",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "GroupID",
                "in":"path"
              },
              {
                "name": "SenerId",
                "in": "path"
              },
              {
                "in": "body",
                "name": "body",
                "description": "any",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "messageType":{
                      "type":"array"
                    },
                    "sender":{
                     "type":"string"
                    },
                  },
                  "example": {
                    "message": "Hi How Are You",
                    "messageType":["stringMessage"],
                    "sender":"637331d35d9d5bd2af78e876",
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/GetGroupMessageByNumbers/{roomId}/{userId}": {
          "post": {
            "tags": [
              "Group"
            ],
            "summary": "Will Return  nmber of messages ",
            "description": " Will return number of messages depening on default number of returnned messages and passed index number at the body",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "roomId",
                "in":"path"
              }, 
              {
                "name": "userId",
                "in":"path"
              },
              {
                "in": "body",
                "name": "body",
                "description": "any",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "From": {
                      "type": "number"
                    },
                  },
                  "example": {
                    "From": 1
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/AddNewUserToGroup/{roomId}/{JoinUserId}": {
          "post": {
            "security": [
              {
                "Bearer": []
              }
            ],
            "tags": [
              "Group"
            ],
            "summary": "Will add new member to the group",
            "description": "Will add new member to the group",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "roomId",
                "in":"path"
              }, 
              {
                "name": "JoinUserId",
                "in":"path"
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/RemoveMemberFromchatGroup/{roomId}/{JoinUserId}": {
          "delete": {
            "security": [
              {
                "Bearer": []
              }
            ],
            "tags": [
              "Group"
            ],
            "summary": "will remove member from the group | Remover should be the creator of the Group",
            "description": " will remove member from the group | Remover should be the creator of the Group",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "roomId",
                "in":"path"
              }, 
              {
                "name": "JoinUserId",
                "in":"path"
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/AddStory/{userId}": {
          "post": {
            "tags": [
              "Story"
            ],
            "summary": "Will Return  Created Story Or Added Story ",
            "description": "you can add video or image to added as story and it will Auto deleted after 24 Hour",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "it can be image Or Vedio",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "storyData": {
                      "type": "string"
                    },
                    "isTypeVideo":{
                      "type": "boolean"
                    },
                    "storyCaption":{
                      "type":"array"
                    },
                  },
                  "example": {
                    "storyData": "some meta data base64/5678ojhyu90iuyttyuiiuygfdtyui",
                    "isTypeVideo":false,
                    "storyCaption":"it's Nice day",
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/GetStoryes/{userId}": {
          "get": {
            "tags": [
              "Story"
            ],
            "summary": "Will Return  User Storyes ",
            "description": "Storyes will Auto deleted after 24 Hour",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path"
              }, 
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        "/api/RemoveStory/{userId}/{StoryNumber}": {
          "delete": {
            "tags": [
              "Story"
            ],
            "summary": "Will Delete One Story  ",
            "description": "Storyes will Auto deleted after 24 Hour From The Created time",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path",
                "required": true,
  
              }, 
              {
                "name":"StoryNumber",
                "in":"path",
                "required": true,
  
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
  
        "/api/CreateEvent/{userId}": {
          "post": {
            "tags": [
              "Events"
            ],
            "summary": "will create event ",
            "description": "will crete evnet by given data",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "it can be image Or Vedio",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventTitle": {
                      "type": "string"
                    },
                    "eventDescription": {
                      "type": "string"
                    },
                    "eventCoverImage": {
                      "type": "string"
                    },
                    "eventLocation": {
                      "type": "array"
                    },
                    "eventStartedOn":{
                     "type": "string"
                    },
                  },
                  "example": {
                    "eventTitle": "event Title here",
                    "eventDescription": "event eventDescription here",
                    "eventCoverImage": "some base64/data7890-lklkj;kjkjimage.jpj",
                    "eventLocation": [
                      "USA-NYC",
                    ],
                    "eventStartedOn":"2022-12-30",
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        
        "/api/GetEvent/{eventId}": {
          "get": {
            "tags": [
              "Events"
            ],
            "summary": "will return Event Deatils with given id ",
            "description": "will return Event Deatils with given id ",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "eventId",
                "in":"path"
              }, 
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Not Found"
              }
            }
          }
        },
  
  
     
        "/api/GetEventsCreatedByUser/{userId}": {
          "get": {
            "tags": [
              "Events"
            ],
            "summary": "will return All Events That Created by Specific user with given id ",
            "description": "will return ALL Events That Created by Specific user with given id",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path"
              }, 
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Not Found"
              }
            }
          }
        },
  
  
        "/api/GetUserNearEvents/{userId}": {
          "get": {
            "tags": [
              "Events"
            ],
            "summary": "will return All  Events That  Near From User With given id ",
            "description": "will return ALL   Events That Near From User With given id ",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path"
              }, 
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Not Found"
              }
            }
          }
        },
  
        
        "/api/inviteUserToEvent/{eventId}/{SuserId}/{RuserId}": {
          "get": {
            "tags": [
              "Events"
            ],
            "summary": "This Will Send Notification to the Ruser Recever User As Notification",
            "description": "SuserId = Sender User ID | RuserId Recever User ID",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "eventId",
                "in":"path"
              }, 
              {
                "name": "SuserId",
                "in":"path"
              }, 
              {
                "name": "RuserId",
                "in":"path"
              }, 
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Not Found"
              }
            }
          }
        },
  
        "/api/UserGoingOrNotToEvent/{eventId}/{userId}": {
          "patch": {
            "tags": [
              "Events"
            ],
            "summary": "Select if user will going or not or maybe go to the event ",
            "description":"Select if user will going or not or maybe go to the event ",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path"
              }, 
              {
                "name": "eventId",
                "in":"path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "add data",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "goingUsers": {
                      "type": "boolean"
                    },
                    "mayBeGoingUsers": {
                      "type": "boolean"
                    },
                    "notGoingUsers": {
                      "type": "boolean"
                    },
                  },
                  "example": {
                    "goingUsers": true,
                    "mayBeGoingUsers": false,
                    "notGoingUsers": false,
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        
        "/api/CheckIfUserGoingOrNotToEvent/{eventId}/{userId}": {
          "get": {
            "tags": [
              "Events"
            ],
            "summary": "Will Return the user with given id is Going or maygoing Or not Going To the Event ",
            "description":"Will Return the user with given id is Going or maygoing Or not Going To the Event ",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "userId",
                "in":"path"
              }, 
              {
                "name": "eventId",
                "in":"path"
              }, 
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
  
        "/api/AddCommentToEvent/{eventId}": {
          "post": {
            "tags": [
              "Events"
            ],
            "summary": "Will Return the Updated Event With Added Comment To it ",
            "description":"Will Return the Updated Event With Added Comment To it ",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "eventId",
                "in":"path"
              }, 
              {
                "in": "body",
                "name": "body",
                "description": "pass the comment message and user id",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "userAddedCommentID": {
                      "type": "string"
                    },
                    "commentMessage": {
                      "type": "string"
                    },
  
                  },
                  "example": {
                    "userAddedCommentID": "638d500908da5b0373684538",
                    "commentMessage": "Welcome All",
                  }
                }
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
  
        "/api/UpdateEventDeatils/{eventId}/{userId}": {
          "patch": {
            "tags": [
              "Events"
            ],
            "security": [
              {
                "Bearer": []
              }
            ],
            "summary": "Will Return the Updated Event With Given ID ",
            "description":"Will Return the Updated Event With Given ID ",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "eventId",
                "in":"path"
              }, 
              {
                "name": "userId",
                "in":"path"
              },
              {
                "in": "body",
                "name": "body",
                "description": "Add new Data To The Event",
                "required": true,
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventTitle": {
                      "type": "string"
                    },
                    "eventDescription": {
                      "type": "string"
                    },
                    "eventCoverImage": {
                      "type": "string"
                    },
                    "eventLocation": {
                      "type": "array"
                    },
                    "eventStartedOn":{
                     "type": "string"
                    },
                  },
                  "example": {
                    "eventTitle": "Updated event Title here",
                    "eventDescription": "Updated event eventDescription here",
                    "eventCoverImage": "Updated some base64/data7890-lklkj;kjkjimage.jpj",
                    "eventLocation": [
                      "USA-FLC",
                    ],
                    "eventStartedOn":"2023-01-01",
                  }
                }
              },
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Nout Found"
              }
            }
          }
        },
        
        "/api/GetLeftDaysToStartTheEvent/{eventId}": {
          "get": {
            "tags": [
              "Events"
            ],
            "summary": "will return The Left Days To Start The Event given id ",
            "description": "will return The Left Days To Start The Event given id ",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "eventId",
                "in":"path"
              }, 
            ],
            "responses": {
              "200": {
                "description": "OK"
              },
              "404":{
                "description":"Not Found"
              }
            }
          }
        },
  
  
        
  
        
  
      }

  
  
  
  
  
  
    }
  `
  
  // SwaggerInfo holds exported Swagger Info so clients can modify it
  var SwaggerInfo = &swag.Spec{
    Version:          "",
    Host:             "",
    BasePath:         "",
    Schemes:          []string{},
    Title:            "",
    Description:      "",
    InfoInstanceName: "swagger",
    SwaggerTemplate:  docTemplate,
  }
  
  func init() {
    swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
  }
  